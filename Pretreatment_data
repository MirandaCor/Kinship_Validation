# Cargar librerías
library(dplyr)
library(tidyr)
library(ggplot2)
library(readr)
library(openxlsx)

# Especificar el directorio que contiene los archivos .txt
directorio <- "data/raw/"

# Obtener una lista de todos los archivos .txt en el directorio
archivos_txt <- list.files(path = directorio, pattern = "\\.txt$", full.names = TRUE)

# Leer cada archivo con todas las columnas como tipo character
lista_datos <- lapply(archivos_txt, function(x) read_delim(x, delim = "\t", col_types = cols(.default = "c")))

# Combinar todos los dataframes en uno solo
datos_combinados <- bind_rows(lista_datos)

# Guardar el resultado en un archivo .xlsx
#write.xlsx(datos_combinados, "data/processed/datos_combinados.xlsx")

# Leer datos
#datos_combinados <- read_excel("data/processed/datos_combinados.xlsx")

# Seleccionar las columnas 4 a 33 or 42
subset_datos <- datos_combinados[, 4:33]

# Añadir columna de índice para identificar filas originales
subset_datos$index <- 1:nrow(subset_datos)

# Añadir columna de SAMPLE INFO para agrupar
subset_datos$SAMPLE_INFO <- datos_combinados$`SAMPLE INFO`

# Encontrar filas con los mismos datos en columnas 4 a 33
duplicados <- subset_datos %>%
  group_by(across(1:30)) %>%
  filter(n() > 1) %>%
  arrange(across(1:30))

# Agrupar por SAMPLE INFO para encontrar diferentes folios con mismo perfil
grupos <- duplicados %>%
  group_by(across(1:30)) %>%
  summarise(SAMPLE_INFOS = paste(SAMPLE_INFO, collapse = ", "))

# Mostrar resultados
print(grupos)

duplicados2 <- subset_datos %>%
  group_by(across(1:30)) %>%
  mutate(group_id = cur_group_id()) %>%
  ungroup()

# Añadir el group_id al dataframe original
datos_combinados2 <- datos_combinados %>%
  mutate(group_id = duplicados2$group_id[match(1:nrow(datos_combinados), duplicados2$index)])

# Obtener un DataFrame con filas únicas según group_id
datos_unicos <- datos_combinados2 %>%
  distinct(group_id, .keep_all = TRUE)

# Identificar discordantes
discordantes <- datos_unicos %>%
  group_by(`SAMPLE INFO`) %>%
  filter(n() > 1) %>%
  ungroup()

# Filtrar datos_unicos para excluir discordantes
datos_unicos_sin_discordantes <- datos_unicos %>%
  filter(!(`SAMPLE INFO` %in% discordantes$`SAMPLE INFO`))



# Guardar resultados en diferentes hojas de un archivo .xlsx
sheets <- list(
  'datos_combinados' = datos_combinados,
  'folios_duplicados' = duplicados,
  'folios_duplicados_agrupados' = duplicados2,
  'folios_combinados' = grupos,
  'folios_con_id' = datos_combinados2,
  'discordantes' = discordantes,
  'datos_unicos_sin_discordantes' = datos_unicos_sin_discordantes
)

#write_xlsx(sheets, "data/output/sinceros_sindiscordantes.xlsx")



# Función para dividir el dataframe en partes de 1100 filas (dnaview no soporta muchos perfiles)
split_dataframe <- function(data, size) {
  split(data, ceiling(seq_along(1:nrow(data))/size))
}

# Dividir el dataframe en partes de 1100 filas
data_parts <- split_dataframe(datos_unicos_sin_discordantes, 1100)

# Guardar cada parte en un archivo .txt
for (i in seq_along(data_parts)) {
  file_name <- paste0("data/output/datos_unicos_parte_", i, ".txt")
  write_delim(data_parts[[i]], file_name, delim = "\t")
}

# Anti join guardar lo descartado (no perder datos)
duplicate <- anti_join(datos_combinados, datos_unicos_sin_discordantes)
write_xlsx(duplicate, "data/output/duplicados.xlsx")

# Cuántos parentescos tenemos
datos_unicos2 <- datos_unicos_sin_discordantes %>%
  mutate(Relationship = substr(`SAMPLE INFO`, nchar(`SAMPLE INFO`), nchar(`SAMPLE INFO`)))

relacion_map <- c(
  "A" = "BROTHERS/SISTER", "U" = "BROTHERS/SISTER", "B" = "BROTHERS/SISTER", "C" = "BROTHERS/SISTER",
  "D" = "DAUGHTER", "E" = "DAUGHTER",
  "F" = "FATHER",
  "H" = "HALF BROTHER/SISTER", "I" = "HALF BROTHER/SISTER",
  "J" = "MISSING",
  "K" = "MISSING PERSONS",
  "NA" = "MISSING PERSONS",
  "M" = "MOTHER",
  "O" = "GRANDMOTHER",
  "o" = "GRANDMOTHER",
  "P" = "PARTNER", "Q" = "PARTNER",
  "R" = "UNCLE", "Z" = "UNCLE",
  "S" = "SON", "T" = "SON",
  "X" = "OTHERS",
  "Y" = "NEPHEW/NIECE/GRANDSON"
)

datos_unicos2 <- datos_unicos2 %>%
  mutate(Relationship = recode(Relationship, !!!relacion_map))

# Crear el gráfico
ggplot(datos_unicos2, aes(x = Relationship)) +
  geom_bar() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "SAMPLE INFO", x = "", y = "COUNTS")

ggsave("data/output/distribution_of_relationships.png")
